// -----------------------------------------------------------------------------
// This file contains CSS helper classes.
// -----------------------------------------------------------------------------

/**
 * Clear inner floats
 */
.clearfix::after {
  clear: both;
  content: '';
  display: table;
}

/**
 * Hide text while making it readable for screen readers
 * 1. Needed in WebKit-based browsers because of an implementation bug;
 *    See: https://code.google.com/p/chromium/issues/detail?id=457146
 */
.hide-text {
  overflow: hidden;
  padding: 0; /* 1 */
  text-indent: 101%;
  white-space: nowrap;
}

/**
 * Hide element while making it readable for screen readers
 * Shamelessly borrowed from HTML5Boilerplate:
 * https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css#L119-L133
 */
.visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

.visiblity {
  &--hidden {
    visibility: hidden;
  }
}

/*
This .scss loop will create "margin helpers" and "padding helpers" for use in your web projects.
It will generate several classes such as:
.mr-10 which gives margin-right 10 pixels.
.mr-15 gives MARGIN to the RIGHT 15 pixels.
.mt-15 gives MARGIN to the TOP 15 pixels and so on.
.pb-5 gives PADDING to the BOTTOM of 5 pixels
.pl-40 gives PADDING to the LEFT of 40 pixels
The first letter is "m" or "p" for MARGIN or PADDING
Second letter is "t", "b", "l", or "r" for TOP, BOTTOM, LEFT, or RIGHT
Third letter is the number of spacing in pixels. Adjust the amounts generated by editing the $spaceamounts variable below.
*/

@each $space in $_space-amounts {
  @each $side in $_sides {
    .m#{str-slice($side, 0, 1)}-#{$space} {
      margin-#{$side}: #{$space}px !important;
    }

    .p#{str-slice($side, 0, 1)}-#{$space} {
      padding-#{$side}: #{$space}px !important;
    }
  }
}


@each $media-breakpoint-key, $media-breakpoint-value in $media-breakpoints {
  $operator: '>=';

  @include media('#{$operator}#{$media-breakpoint-key}') {
    @each $space in $_space-amounts {
      @each $side in $_sides {
        .m#{str-slice($side, 0, 1)}-#{$media-breakpoint-key}-#{$space} {
          margin-#{$side}: #{$space}px !important;
        }

        .p#{str-slice($side, 0, 1)}-#{$media-breakpoint-key}-#{$space} {
          padding-#{$side}: #{$space}px !important;
        }
      }
    }

  }
}


/**
 * Generates classes which allow a user to set display for a specific viewport
 * e.g. d-sm-table, d-lg-none, d-xs-block, and etc.
 */

@each $media-breakpoint-key, $media-breakpoint-value in $media-breakpoints {
  $operator: '>=';
  $col-name: 'd-';

  @if $media-breakpoint-key == '' {
    $col-name: 'd';
  }

  @each $display-type-key, $display-type-value in $display-types {
    @include media('#{$operator}#{$media-breakpoint-key}') {
      .#{$col-name}#{$media-breakpoint-key}-#{$display-type-key} {
        display: $display-type-key !important;
      }
    }
  }
}


